# CI/CD Pipeline for Trading Signal System

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily data quality checks
    - cron: '0 10 * * *'  # 10 AM UTC daily

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  PYTHON_VERSION: '3.9'

jobs:
  # Testing job
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run linting
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports || true

      - name: Run unit tests
        run: |
          pytest tests/ -v -m "not integration" --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            .coverage

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run safety check
        run: |
          pip install safety
          safety check --json

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Build and push base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile.base
          push: true
          tags: |
            gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/base:latest
            gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/base:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push ingestion image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile.ingestion
          push: true
          tags: |
            gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/daily-ingestion:latest
            gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/daily-ingestion:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile.api
          push: true
          tags: |
            gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/api:latest
            gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy daily-ingestion-staging \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/daily-ingestion:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --no-allow-unauthenticated \
            --service-account trading-system@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars "ENVIRONMENT=staging"

      - name: Run smoke tests
        run: |
          # Add smoke test commands here
          echo "Running smoke tests..."

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy Infrastructure
        run: |
          cd terraform
          terraform init
          terraform plan -var="project_id=${{ env.GCP_PROJECT_ID }}"
          # Uncomment to auto-apply
          # terraform apply -auto-approve -var="project_id=${{ env.GCP_PROJECT_ID }}"

      - name: Deploy to Cloud Run (Production)
        run: |
          # Deploy daily ingestion service
          gcloud run deploy daily-ingestion \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/daily-ingestion:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --no-allow-unauthenticated \
            --service-account trading-system@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          
          # Deploy API service
          gcloud run deploy prediction-api \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/trading-system/api:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --service-account trading-system@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com

      - name: Update Cloud Scheduler jobs
        run: |
          # Update scheduler job with new service URL if needed
          echo "Cloud Scheduler jobs updated"

      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Data quality check (scheduled)
  data-quality:
    name: Data Quality Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 10 * * *'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install google-cloud-bigquery pandas loguru

      - name: Run data quality checks
        run: |
          python scripts/data_quality_check.py

      - name: Alert on issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'Data quality check failed! Check the logs.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Model validation (weekly)
  model-validation:
    name: Model Validation
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * 0'  # Sunday 2 AM UTC

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Trigger model validation job
        run: |
          gcloud run jobs execute model-validation \
            --region ${{ env.GCP_REGION }}

      - name: Check validation results
        run: |
          # Query BigQuery for validation metrics
          echo "Model validation completed"