[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "trading-signal-system"
version = "0.1.0"
description = "GNN-based trading signal generation system"
authors = [
    {name = "Trading System Team", email = "team@tradingsystem.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9,<3.12"
keywords = ["trading", "machine-learning", "gnn", "finance", "predictions"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

# Core dependencies - minimal set required by all services
dependencies = [
    # Core dependencies
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "loguru>=0.7.0,<1.0.0",
    "click>=8.1.0,<9.0.0",
    
    # Basic data processing (used everywhere)
    "pandas>=2.0.0,<2.2.0",
    "numpy>=1.24.0,<2.0.0",
    
    # Core Google Cloud (authentication and common)
    "google-cloud-bigquery>=3.12.0,<4.0.0",
    
    # Shared dependencies used by multiple services
    "holidays>=0.34,<1.0.0",  # Used by ingestion + feature-engineering
    "tqdm>=4.66.0,<5.0.0",    # Used by ingestion + training
    "scikit-learn>=1.3.0,<2.0.0",  # Used by training + feature-engineering
    "scipy>=1.11.0,<2.0.0",   # Used by training + feature-engineering
    "networkx>=3.1,<4.0.0",   # Used by feature-engineering + training
]

# Optional dependency groups
[project.optional-dependencies]
# API Service dependencies
api = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn>=0.24.0,<1.0.0",
    "pydantic>=2.4.0,<3.0.0",
]

# Data Ingestion Service dependencies
ingestion = [
    "requests>=2.31.0,<3.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "alpha-vantage==2.3.1",
    "yfinance>=0.2.18,<1.0.0",
    "google-cloud-bigquery-storage>=2.22.0,<3.0.0",
    "pyarrow>=12.0.0,<16.0.0",
    "pandas-gbq>=0.19.0,<1.0.0",
    "flask>=3.0.0,<4.0.0",
    "gcsfs>=2023.12.0",  # For GCS filesystem access
    "duckdb>=0.9.0",  # For querying Parquet files
]

# ML Training Service dependencies
training = [
    "torch>=2.1.0,<3.0.0",
    "torch-geometric>=2.4.0,<3.0.0",
    "tensorboard>=2.15.0,<3.0.0",
    "mlflow>=2.8.0,<3.0.0",
    "joblib>=1.3.0,<2.0.0",
    "google-cloud-storage>=2.12.0,<3.0.0",
    "google-cloud-aiplatform>=1.38.0,<2.0.0",
]

# Feature Engineering dependencies
feature-engineering = [
    "ta>=0.10.2,<1.0.0",
    "pandas-ta>=0.3.14b0",
]

# All dependencies (for local development)
all = [
    # API dependencies
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn>=0.24.0,<1.0.0",
    "pydantic>=2.4.0,<3.0.0",
    
    # Ingestion dependencies
    "requests>=2.31.0,<3.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "alpha-vantage==2.3.1",
    "yfinance>=0.2.18,<1.0.0",
    "google-cloud-bigquery-storage>=2.22.0,<3.0.0",
    "pyarrow>=12.0.0,<16.0.0",
    "pandas-gbq>=0.19.0,<1.0.0",
    "gcsfs>=2023.12.0",
    "duckdb>=0.9.0",
    
    # Training dependencies
    "torch>=2.1.0,<3.0.0",
    "torch-geometric>=2.4.0,<3.0.0",
    "tensorboard>=2.15.0,<3.0.0",
    "mlflow>=2.8.0,<3.0.0",
    "joblib>=1.3.0,<2.0.0",
    "google-cloud-storage>=2.12.0,<3.0.0",
    "google-cloud-aiplatform>=1.38.0,<2.0.0",
    
    # Feature engineering dependencies
    "ta>=0.10.2,<1.0.0",
    "pandas-ta>=0.3.14b0",
    
    # Additional GCP services
    "google-cloud-scheduler>=2.13.0,<3.0.0",
    "google-cloud-logging>=3.8.0,<4.0.0",
    "google-cloud-secret-manager>=2.16.0,<3.0.0",
    
    # Analysis dependencies
    "matplotlib>=3.7.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0",
]

# Development tools
dev = [
    "black>=23.7.0,<25.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

# Testing tools
test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
]

# Linting tools
lint = [
    "flake8>=6.1.0,<8.0.0",
    "black>=23.7.0,<25.0.0",
    "mypy>=1.5.0,<2.0.0",
]

# Documentation tools
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

# Console scripts (from setup.py entry_points)
[project.scripts]
trading-daily-ingestion = "src.jobs.daily_ingestion:main"
trading-backfill = "src.jobs.backfill_job:main"
trading-train = "src.jobs.training_job:main"
trading-predict = "src.training.prediction_pipeline:main"
trading-ohlcv = "src.jobs.ohlcv_ingestion_job:cli"
trading-sentiment = "src.jobs.sentiment_ingestion_job:cli"

[project.urls]
Homepage = "https://github.com/yourorg/trading-signal-system"
Repository = "https://github.com/yourorg/trading-signal-system.git"
Issues = "https://github.com/yourorg/trading-signal-system/issues"
Documentation = "https://github.com/yourorg/trading-signal-system/blob/main/README.md"

# Package discovery
[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]

[tool.setuptools.package-data]
config = ["*.yaml", "*.yml"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# But we can document the settings here for reference:
# [tool.flake8]  # Not supported yet
# max-line-length = 100
# extend-ignore = E203, W503
# max-complexity = 10