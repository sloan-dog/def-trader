name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      auto_approve:
        description: 'Auto approve apply/destroy (use with caution)'
        required: false
        default: false
        type: boolean
      workspace:
        description: 'Terraform workspace'
        required: false
        default: 'default'
        type: string

env:
  TERRAFORM_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      run: |
        terraform init -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate"
      working-directory: ./terraform
    
    - name: Select Terraform Workspace
      run: |
        terraform workspace select ${{ github.event.inputs.workspace }} || terraform workspace new ${{ github.event.inputs.workspace }}
      working-directory: ./terraform
    
    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./terraform
      continue-on-error: true
    
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform
    
    - name: Terraform Plan
      if: github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
      run: |
        terraform plan -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -out=tfplan
      working-directory: ./terraform
    
    - name: Upload Terraform Plan
      if: github.event.inputs.terraform_action == 'apply'
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: terraform/tfplan
    
    - name: Terraform Apply
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        if [[ "${{ github.event.inputs.auto_approve }}" == "true" ]]; then
          terraform apply -auto-approve tfplan
        else
          terraform apply tfplan
        fi
      working-directory: ./terraform
    
    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        if [[ "${{ github.event.inputs.auto_approve }}" == "true" ]]; then
          terraform destroy -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -auto-approve
        else
          terraform destroy -var-file="environments/${{ github.event.inputs.environment }}.tfvars"
        fi
      working-directory: ./terraform
    
    - name: Terraform Output
      if: github.event.inputs.terraform_action == 'apply'
      run: terraform output -json > outputs.json
      working-directory: ./terraform
    
    - name: Upload Terraform Outputs
      if: github.event.inputs.terraform_action == 'apply'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: terraform/outputs.json