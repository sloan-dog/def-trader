# Docker Compose for local development

version: '3.8'

services:
  # PostgreSQL for local metadata storage
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: trading_signals
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MLflow for experiment tracking
  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://postgres:password@postgres:5432/mlflow
      - DEFAULT_ARTIFACT_ROOT=gs://${GCP_PROJECT_ID}-mlflow-artifacts
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow
      --default-artifact-root gs://${GCP_PROJECT_ID}-mlflow-artifacts
      --host 0.0.0.0
      --port 5000

  # API service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8080:8080"
    environment:
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - BQ_DATASET=${BQ_DATASET}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - MODEL_PATH=/app/models/latest.pth
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./config:/app/config
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter notebook server for analysis
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - BQ_DATASET=${BQ_DATASET}
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./src:/home/jovyan/src
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Flower for Celery monitoring (if using Celery for async tasks)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.base
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
    command: celery -A src.tasks flower
    depends_on:
      - redis

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: trading-network